package gen_application

import (
	"fmt"
	"log"
	"os"
	"path"
	"strings"
	"text/template"

	"github.com/lujingwei002/gensc"
)

var code = `
// Code generated by github.com/lujingwei002/gensc. DO NOT EDIT.
// Code generated by github.com/lujingwei002/gensc. DO NOT EDIT.
// Code generated by github.com/lujingwei002/gensc. DO NOT EDIT.

package main 

import (
	"fmt"
	"github.com/lujingwei002/gira/log"
	"github.com/lujingwei002/gira"
	"github.com/lujingwei002/gira/app"
	{{.ApplicationName}} "{{.ModuleName}}/{{.ApplicationName}}/app"
)

var respositoryVersion string
var buildTime string

// 检查是否满足接口
var _ = (gira.Application)(&{{.ApplicationName}}.Application{})
var _ = (gira.ResourceSource)(&{{.ApplicationName}}.Application{})

func main() {
	application := {{.ApplicationName}}.NewApplication()
	err := app.Cli("{{.ApplicationName}}", fmt.Sprintf("{{.Version}}.%s", respositoryVersion), buildTime, application)
	if err != nil {
		log.Println(err)
	}
}

`

type application struct {
	ApplicationName string
	ModuleName      string
	Version         string
}
type gen_state struct {
	config       gensc.GenApplicationConfig
	applications []application
}

type Parser interface {
	parse(state *gen_state) error
}

func gen(state *gen_state) error {
	if _, err := os.Stat(state.config.SrcGenApplicationDir); err != nil && os.IsNotExist(err) {
		if err := os.Mkdir(state.config.SrcGenApplicationDir, 0755); err != nil {
			return err
		}
	}
	for _, v := range state.applications {
		sb := strings.Builder{}
		srcGenApplicationDir := path.Join(state.config.SrcGenApplicationDir, v.ApplicationName)
		if _, err := os.Stat(srcGenApplicationDir); err != nil && os.IsNotExist(err) {
			if err := os.Mkdir(srcGenApplicationDir, 0755); err != nil {
				return err
			}
		}
		applicationPath := path.Join(srcGenApplicationDir, fmt.Sprintf("%s.gen.go", v.ApplicationName))
		file, err := os.OpenFile(applicationPath, os.O_WRONLY|os.O_CREATE, 0644)
		if err != nil {
			return err
		}
		file.Truncate(0)
		defer file.Close()

		tmpl, err := template.New("app").Parse(code)
		if err != nil {
			return err
		}
		if err := tmpl.Execute(&sb, v); err != nil {
			return err
		}
		log.Printf("gen application %v", v.ApplicationName)
		file.WriteString(sb.String())
	}
	return nil
}

func Gen(config gensc.GenApplicationConfig) error {
	log.Println("===============gen app start===============")
	// 初始化
	state := &gen_state{
		config: config,
	}
	var p Parser
	if true {
		p = &golang_parser{}
	}
	if err := p.parse(state); err != nil {
		log.Println(err)
		return err
	}
	if err := gen(state); err != nil {
		log.Println(err)
		return err
	}
	log.Println("===============gen app finished===============")
	return nil
}
